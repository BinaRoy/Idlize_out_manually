/*
 * Copyright (c) 2024-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// WARNING! THIS FILE IS AUTO-GENERATED, DO NOT MAKE CHANGES, THEY WILL BE LOST ON NEXT GENERATION!

package idlize
import std.collection.*
import Interop.*
import KoalaRuntime.*
import KoalaRuntime.memoize.*
import std.time.DateTime
public open class ArkColumnPeer <: ArkCommonMethodPeer {
    public init(peerPtr: UInt64, id: Int32, name: String, flags: Int32) {
        super(peerPtr, id, name, flags)
    }
    static public func create(component: Option<ComponentBase>, flags: Int32): ArkColumnPeer {
        let peerId = PeerNode.nextId()
        let _peerPtr = ArkUIGeneratedNativeModule._Column_construct(peerId, flags)
        let _peer = ArkColumnPeer(_peerPtr, peerId, "Column", flags)
        if (let Some(component) <- component) { component.setPeer(_peer) }
        return _peer
    }
    public open func setColumnOptionsAttribute(): Unit {
        ArkUIGeneratedNativeModule._ColumnInterface_setColumnOptions(this.peer.ptr);
    }
    public open func setAlignItemsAttribute(value: HorizontalAlign): Unit {
        ArkUIGeneratedNativeModule._ColumnAttribute_setAlignItems(this.peer.ptr, value.value);
    }
}
public open class HorizontalAlign {
    public static var START: HorizontalAlign = HorizontalAlign(0)
    public static var CENTER: HorizontalAlign = HorizontalAlign(1)
    public static var END: HorizontalAlign = HorizontalAlign(2)
    public var value: Int32
    init(arg0: Int32) {
        value = arg0
    }
}
public interface ColumnInterfaceInterfaces {
}
public open class ColumnInterface <: ColumnInterfaceInterfaces {
    init() {
    }
}
public interface ColumnAttributeInterfaces <: CommonMethodInterfaces {
}
public open class ColumnAttribute <: ColumnAttributeInterfaces {
    init() {
    }
}
public open class LayoutSafeAreaType {
    public static var SYSTEM: LayoutSafeAreaType = LayoutSafeAreaType(0)
    public var value: Int32
    init(arg0: Int32) {
        value = arg0
    }
}
public open class LayoutSafeAreaEdge {
    public static var TOP: LayoutSafeAreaEdge = LayoutSafeAreaEdge(0)
    public static var BOTTOM: LayoutSafeAreaEdge = LayoutSafeAreaEdge(1)
    public var value: Int32
    init(arg0: Int32) {
        value = arg0
    }
}
public open class TitleHeight {
    public static var MAIN_ONLY: TitleHeight = TitleHeight(0)
    public static var MAIN_WITH_SUB: TitleHeight = TitleHeight(1)
    public var value: Int32
    init(arg0: Int32) {
        value = arg0
    }
}
public open class ArkColumnComponent <: ArkCommonMethodComponent & ColumnAttributeInterfaces {
    public open func getPeer(): ArkColumnPeer {
        if (let Some(peer) <- this.peer) {
            return match (peer as ArkColumnPeer) { case Some(x) => x; case None => throw Exception("Cast is not succeeded")}
        } else { throw Exception()}
    }
    public open func setColumnOptions(): Unit {
        if (this.checkPriority("setColumnOptions")) {
            let thisPeer = this.getPeer()
            thisPeer.setColumnOptionsAttribute()
            return
        }
        return
    }
    public open func alignItems(value: HorizontalAlign): Unit {
        if (this.checkPriority("alignItems")) {
            let value_casted: HorizontalAlign = value
            let thisPeer = this.getPeer()
            thisPeer.setAlignItemsAttribute(value_casted)
            return
        }
        return
    }
    public open func applyAttributesFinish(): Unit {
        // we call this function outside of class, so need to make it public
        super.applyAttributesFinish()
    }
}
class ColumnAttributeStyleHolder {
    var value: ?((attributes: ColumnAttributeInterfaces) -> Unit)
    init (value: ?((attributes: ColumnAttributeInterfaces) -> Unit)) {
        this.value = value
    }
}

class ColumnAttributeContentHolder {
    var value: ?(() -> Unit)
    init (value: ?(() -> Unit)) {
        this.value = value
    }
}


@Memo
public func ArkColumn(
    style: ?((attributes: ColumnAttributeInterfaces) -> Unit),
    content_: ?(() -> Unit)
): Unit {
    let styleHolder = ColumnAttributeStyleHolder(style)
    let contentHolder = ColumnAttributeContentHolder(content_)
    let receiver = remember({ => ArkColumnComponent() })
    NodeAttach<ArkColumnPeer>({ => 
        ArkColumnPeer.create(receiver, 0) 
    }) {
        receiver.setColumnOptions()
        if (let Some(style) <- styleHolder.value) {
            style(receiver)
        }
        if (let Some(content_) <- contentHolder.value) {
            content_()
        }
    }
}

